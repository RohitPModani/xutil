export const REGEX_CATEGORIES = [
  {
    name: "Characters",
    items: [
      { pattern: ".", description: "Any character except newline" },
      { pattern: "\\.", description: "Literal dot character" },
      { pattern: "\\d", description: "Digit (0-9)" },
      { pattern: "\\D", description: "Non-digit" },
      { pattern: "\\w", description: "Word character (a-z, A-Z, 0-9, _)" },
      { pattern: "\\W", description: "Non-word character" },
      { pattern: "\\s", description: "Whitespace (space, tab, newline)" },
      { pattern: "\\S", description: "Non-whitespace" },
      { pattern: "[abc]", description: "Any character in set (a, b, or c)" },
      { pattern: "[^abc]", description: "Any character not in set" },
      { pattern: "[a-z]", description: "Range of characters (a to z)" },
      { pattern: "[a-zA-Z]", description: "Lowercase and uppercase letters" },
      { pattern: "\\b", description: "Word boundary" },
      { pattern: "\\B", description: "Non-word boundary" },
      { pattern: "\\0", description: "NUL character" },
      { pattern: "\\n", description: "Newline" },
      { pattern: "\\r", description: "Carriage return" },
      { pattern: "\\t", description: "Tab" },
      { pattern: "\\f", description: "Form feed" },
      { pattern: "\\v", description: "Vertical tab" },
      { pattern: "\\xhh", description: "Character with hex code hh" },
      {
        pattern: "\\uhhhh",
        description: "Unicode character with hex code hhhh",
      },
      { pattern: "\\u{hhhh}", description: "Unicode character (ES6+)" },
      { pattern: "\\cX", description: "Control character (X is A-Z)" },
    ],
  },
  {
    name: "Character Classes",
    items: [
      { pattern: "[:alnum:]", description: "Alphanumeric characters" },
      { pattern: "[:alpha:]", description: "Alphabetic characters" },
      { pattern: "[:ascii:]", description: "ASCII characters (0-127)" },
      { pattern: "[:blank:]", description: "Space or tab" },
      { pattern: "[:cntrl:]", description: "Control characters" },
      { pattern: "[:digit:]", description: "Digits (0-9)" },
      { pattern: "[:graph:]", description: "Visible characters (no space)" },
      { pattern: "[:lower:]", description: "Lowercase letters" },
      { pattern: "[:print:]", description: "Visible characters + space" },
      { pattern: "[:punct:]", description: "Punctuation" },
      { pattern: "[:space:]", description: "Whitespace" },
      { pattern: "[:upper:]", description: "Uppercase letters" },
      {
        pattern: "[:word:]",
        description: "Word characters (letters, digits, underscore)",
      },
      {
        pattern: "[:xdigit:]",
        description: "Hexadecimal digits (0-9, a-f, A-F)",
      },
    ],
  },
  {
    name: "Unicode",
    items: [
      { pattern: "\\p{L}", description: "Any letter" },
      { pattern: "\\p{Ll}", description: "Lowercase letter" },
      { pattern: "\\p{Lu}", description: "Uppercase letter" },
      { pattern: "\\p{N}", description: "Any number" },
      { pattern: "\\p{P}", description: "Punctuation" },
      { pattern: "\\p{S}", description: "Symbol" },
      { pattern: "\\p{Z}", description: "Separator" },
      { pattern: "\\p{Sc}", description: "Currency symbol" },
      { pattern: "\\p{Emoji}", description: "Emoji characters" },
      { pattern: "\\p{Script=Latin}", description: "Latin script" },
      { pattern: "\\p{Script=Cyrillic}", description: "Cyrillic script" },
      { pattern: "\\p{Script=Han}", description: "Chinese characters" },
      { pattern: "\\P{L}", description: "Not a letter (uppercase P negates)" },
    ],
  },
  {
    name: "Anchors",
    items: [
      { pattern: "^", description: "Start of string/line" },
      { pattern: "$", description: "End of string/line" },
      { pattern: "\\A", description: "Start of string (ignore multiline)" },
      { pattern: "\\Z", description: "End of string (before final newline)" },
      { pattern: "\\z", description: "Absolute end of string" },
      { pattern: "\\G", description: "End of previous match" },
      { pattern: "\\K", description: "Reset match (keep left)" },
    ],
  },
  {
    name: "Quantifiers",
    items: [
      { pattern: "*", description: "0 or more (greedy)" },
      { pattern: "+", description: "1 or more (greedy)" },
      { pattern: "?", description: "0 or 1 (greedy)" },
      { pattern: "{n}", description: "Exactly n times" },
      { pattern: "{n,}", description: "n or more times" },
      { pattern: "{n,m}", description: "Between n and m times" },
      { pattern: "*?", description: "0 or more (lazy)" },
      { pattern: "+?", description: "1 or more (lazy)" },
      { pattern: "??", description: "0 or 1 (lazy)" },
      { pattern: "*+", description: "0 or more (possessive)" },
      { pattern: "++", description: "1 or more (possessive)" },
      { pattern: "?+", description: "0 or 1 (possessive)" },
    ],
  },
  {
    name: "Groups & References",
    items: [
      { pattern: "(abc)", description: "Capturing group" },
      { pattern: "(?:abc)", description: "Non-capturing group" },
      { pattern: "(?<name>abc)", description: "Named capturing group" },
      { pattern: "\\1", description: "Backreference to group #1" },
      { pattern: "\\k<name>", description: "Backreference to named group" },
      { pattern: "(?>abc)", description: "Atomic group" },
      { pattern: "(?|(a)|(b))", description: "Branch reset group" },
      { pattern: "(?(1)yes|no)", description: "Conditional pattern" },
      { pattern: "(?R)", description: "Recurse entire pattern" },
      { pattern: "(?1)", description: "Recurse first group" },
    ],
  },
  {
    name: "Lookarounds",
    items: [
      { pattern: "(?=abc)", description: "Positive lookahead" },
      { pattern: "(?!abc)", description: "Negative lookahead" },
      { pattern: "(?<=abc)", description: "Positive lookbehind" },
      { pattern: "(?<!abc)", description: "Negative lookbehind" },
      { pattern: "(?<=^.{5})", description: "Lookbehind for first 5 chars" },
    ],
  },
  {
    name: "Flags/Modifiers",
    items: [
      { pattern: "/i", description: "Case-insensitive" },
      { pattern: "/g", description: "Global match" },
      { pattern: "/m", description: "Multiline mode" },
      { pattern: "/s", description: "Dot matches newline" },
      { pattern: "/u", description: "Unicode mode" },
      { pattern: "/y", description: "Sticky mode" },
      { pattern: "/x", description: "Ignore whitespace" },
      { pattern: "(?i)", description: "Inline case-insensitive" },
      { pattern: "(?m)", description: "Inline multiline" },
      { pattern: "(?s)", description: "Inline dot-all" },
      { pattern: "(?u)", description: "Inline unicode" },
      { pattern: "(?x)", description: "Inline ignore whitespace" },
    ],
  },
  {
    name: "Special Constructs",
    items: [
      { pattern: "(*PRUNE)", description: "Discard backtracking path" },
      { pattern: "(*SKIP)", description: "Skip current position" },
      { pattern: "(*FAIL)", description: "Force match failure" },
      { pattern: "(*ACCEPT)", description: "Accept current match" },
      { pattern: "(?#comment)", description: "Inline comment" },
      { pattern: "#...", description: "Comment in /x mode" },
    ],
  },
  {
    name: "Common Patterns",
    items: [
      { pattern: "\\d{3}-\\d{2}-\\d{4}", description: "SSN (XXX-XX-XXXX)" },
      { pattern: "\\d{4}-\\d{2}-\\d{2}", description: "Date (YYYY-MM-DD)" },
      {
        pattern: "(0[1-9]|1[0-2])/(0[1-9]|[12]\\d|3[01])/\\d{4}",
        description: "Date (MM/DD/YYYY)",
      },
      {
        pattern: "[a-zA-Z0-9._%+-]+@[a-zA-Z0-9.-]+\\.[a-zA-Z]{2,}",
        description: "Email address",
      },
      { pattern: "https?://[\\w.-]+\\.[a-zA-Z]{2,}", description: "URL" },
      { pattern: "#?([a-f0-9]{6}|[a-f0-9]{3})", description: "Hex color code" },
      { pattern: "^[+-]?\\d+$", description: "Integer" },
      { pattern: "^[+-]?\\d*\\.?\\d+$", description: "Decimal number" },
      { pattern: "^(?:[01]\\d|2[0-3]):[0-5]\\d$", description: "24-hour time" },
      {
        pattern: "^(0[1-9]|1[0-2]):[0-5]\\d\\s[AP]M$",
        description: "12-hour time",
      },
      { pattern: "\\b[A-Z][a-z]+\\b", description: "Capitalized words" },
      { pattern: "\\b\\d{5}(?:-\\d{4})?\\b", description: "US ZIP code" },
      {
        pattern: "\\b[1-9]\\d{2}-\\d{3}-\\d{4}\\b",
        description: "US phone number",
      },
      {
        pattern: "\\b\\d{3}\\.\\d{3}\\.\\d{4}\\b",
        description: "US phone (XXX.XXX.XXXX)",
      },
      {
        pattern: "\\b\\d{3}\\s\\d{3}\\s\\d{4}\\b",
        description: "US phone (XXX XXX XXXX)",
      },
      {
        pattern: "\\b(?:4[0-9]{12}(?:[0-9]{3})?)\\b",
        description: "Visa card number",
      },
      {
        pattern:
          "\\b(?:5[1-5][0-9]{2}|222[1-9]|22[3-9][0-9]|2[3-6][0-9]{2}|27[01][0-9]|2720)[0-9]{12}\\b",
        description: "Mastercard",
      },
    ],
  },
] as const;

export const REGEX_CATEGORIES = [
    {
      name: 'Characters',
      items: [
        { pattern: '.', description: 'Any character except newline' },
        { pattern: '\\d', description: 'Digit (0-9)' },
        { pattern: '\\D', description: 'Non-digit' },
        { pattern: '\\w', description: 'Word character (a-z, A-Z, 0-9, _)' },
        { pattern: '\\W', description: 'Non-word character' },
        { pattern: '\\s', description: 'Whitespace (space, tab, newline)' },
        { pattern: '\\S', description: 'Non-whitespace' },
        { pattern: '[abc]', description: 'Any character in set (a, b, or c)' },
        { pattern: '[^abc]', description: 'Any character not in set' },
        { pattern: '[a-z]', description: 'Range of characters (a to z)' },
        { pattern: '\\b', description: 'Word boundary' },
        { pattern: '\\B', description: 'Non-word boundary' },
        { pattern: '\\0', description: 'NUL character' },
        { pattern: '\\n', description: 'Newline' },
        { pattern: '\\r', description: 'Carriage return' },
        { pattern: '\\t', description: 'Tab' },
        { pattern: '\\xhh', description: 'Character with hex code hh' },
        { pattern: '\\uhhhh', description: 'Unicode character with hex code hhhh' },
        // POSIX classes
        { pattern: '[:alpha:]', description: 'Alphabetic characters' },
        { pattern: '[:digit:]', description: 'Digits' },
        { pattern: '[:alnum:]', description: 'Alphanumeric characters' },
      ],
    },
    {
      name: 'Unicode',
      items: [
        { pattern: '\\p{L}', description: 'Any letter' },
        { pattern: '\\p{N}', description: 'Any number' },
        { pattern: '\\p{Sc}', description: 'Currency symbols' },
        { pattern: '\\p{Emoji}', description: 'Emoji characters' },
        { pattern: '\\p{Script=Latin}', description: 'Latin script characters' },
        { pattern: '\\p{Script=Cyrillic}', description: 'Cyrillic script characters' },
        { pattern: '\\P{L}', description: 'Not a letter (uppercase P negates)' },
      ],
    },
    {
      name: 'Anchors',
      items: [
        { pattern: '^', description: 'Start of string (or line with multiline flag)' },
        { pattern: '$', description: 'End of string (or line with multiline flag)' },
        { pattern: '\\A', description: 'Start of string (not affected by multiline)' },
        { pattern: '\\Z', description: 'End of string, before final newline' },
        { pattern: '\\z', description: 'Absolute end of string' },
        { pattern: '\\G', description: 'Where previous match ended' },
        { pattern: '\\K', description: 'Keep text matched so far out of overall match' },
      ],
    },
    {
      name: 'Quantifiers',
      items: [
        { pattern: '*', description: 'Zero or more' },
        { pattern: '+', description: 'One or more' },
        { pattern: '?', description: 'Zero or one (optional)' },
        { pattern: '{n}', description: 'Exactly n times' },
        { pattern: '{n,}', description: 'n or more times' },
        { pattern: '{n,m}', description: 'Between n and m times' },
        { pattern: '*?', description: 'Zero or more, non-greedy' },
        { pattern: '+?', description: 'One or more, non-greedy' },
        { pattern: '??', description: 'Zero or one, non-greedy' },
        // Possessive quantifiers
        { pattern: '*+', description: 'Zero or more, possessive' },
        { pattern: '++', description: 'One or more, possessive' },
        { pattern: '?+', description: 'Zero or one, possessive' },
      ],
    },
    {
      name: 'Groups & Captures',
      items: [
        { pattern: '(abc)', description: 'Capturing group' },
        { pattern: '(?:abc)', description: 'Non-capturing group' },
        { pattern: '(?<name>abc)', description: 'Named capturing group' },
        { pattern: '\\1', description: 'Backreference to group #1' },
        { pattern: '\\k<name>', description: 'Backreference to named group' },
        { pattern: '\\g{-2}', description: 'Relative backreference (two groups before)' },
        // Atomic groups
        { pattern: '(?>abc)', description: 'Atomic group (no backtracking)' },
      ],
    },
    {
      name: 'Advanced Groups',
      items: [
        { pattern: '(?|(a)|(b))', description: 'Branch reset group' },
        { pattern: '(?(1)yes|no)', description: 'Conditional pattern' },
        { pattern: '(?R)', description: 'Recurse entire pattern' },
        { pattern: '(?1)', description: 'Call first captured group as subroutine' },
      ],
    },
    {
      name: 'Assertions',
      items: [
        { pattern: '(?=abc)', description: 'Positive lookahead' },
        { pattern: '(?!abc)', description: 'Negative lookahead' },
        { pattern: '(?<=abc)', description: 'Positive lookbehind' },
        { pattern: '(?<!abc)', description: 'Negative lookbehind' },
        { pattern: '(?<=^.{n})', description: 'Match after n characters from start' },
        // PCRE control verbs
        { pattern: '(*PRUNE)', description: 'Discard current matching path' },
        { pattern: '(*SKIP)', description: 'Skip current match position' },
        { pattern: '(*FAIL)', description: 'Force match failure' },
      ],
    },
    {
      name: 'Flags/Modifiers',
      items: [
        { pattern: '/i', description: 'Case-insensitive' },
        { pattern: '/g', description: 'Global (all matches)' },
        { pattern: '/m', description: 'Multiline (^ and $ match line boundaries)' },
        { pattern: '/s', description: 'Dot matches newline' },
        { pattern: '/u', description: 'Unicode matching' },
        { pattern: '/y', description: 'Sticky (match from lastIndex)' },
        // Inline modifiers
        { pattern: '(?i)', description: 'Case-insensitive mode' },
        { pattern: '(?m)', description: 'Multiline mode' },
        { pattern: '(?s)', description: 'Dot matches newline' },
        { pattern: '(?-i)', description: 'Turn off case-insensitive' },
      ],
    },
    {
      name: 'Escape Sequences',
      items: [
        { pattern: '\\', description: 'Escape special characters (e.g., \\., \\*, \\[)' },
        { pattern: '[\\b]', description: 'Backspace (in character class)' },
        { pattern: '\\cX', description: 'Control character (X is A-Z)' },
        { pattern: '(?#comment)', description: 'Inline comment' },
        { pattern: '#...', description: 'Comment in extended mode (/x flag)' },
      ],
    },
    {
      name: 'Common Patterns',
      items: [
        { pattern: '[0-9]', description: 'Digit (same as \\d)' },
        { pattern: '[a-zA-Z]', description: 'Any letter' },
        { pattern: '[a-zA-Z0-9]', description: 'Alphanumeric' },
        { pattern: '\\S+', description: 'Non-empty string without whitespace' },
        { pattern: '[-a-zA-Z0-9]+', description: 'URL slug' },
        { pattern: '[a-f0-9]{6}', description: 'Hex color code (6 digits)' },
        { pattern: '\\d{4}-\\d{2}-\\d{2}', description: 'Date (YYYY-MM-DD)' },
        { pattern: '[a-zA-Z0-9._%+-]+@[a-zA-Z0-9.-]+\\.[a-zA-Z]{2,}', description: 'Email address' },
        { pattern: 'https?://[\\w.-]+\\.[a-zA-Z]{2,}', description: 'Basic URL' },
        // Additional common patterns
        { pattern: '^[+-]?\\d+$', description: 'Integer with optional sign' },
        { pattern: '^[+-]?\\d*\\.?\\d+$', description: 'Decimal number' },
        { pattern: '^(?:[01]\\d|2[0-3]):[0-5]\\d$', description: '24-hour time' },
        { pattern: '^(0[1-9]|1[0-2]):[0-5]\\d\\s[AP]M$', description: '12-hour time' },
        { pattern: '^#?([a-f0-9]{6}|[a-f0-9]{3})$', description: 'Hex color (3 or 6 digits, optional #)' },
      ],
    },
  ] as const;